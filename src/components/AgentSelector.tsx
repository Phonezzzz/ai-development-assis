import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { useKV } from '@github/spark/hooks';
import { cn } from '@/lib/utils';
import { 
  Robot,
  Plus,
  Wrench,
  BugBeetle,
  Code,
  Gear
} from '@phosphor-icons/react';
import { toast } from 'sonner';

interface CustomAgent {
  id: string;
  name: string;
  description: string;
  prompt: string;
  icon: string;
  createdAt: Date;
}

const DEFAULT_AGENTS = [
  { 
    id: 'architector', 
    name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', 
    icon: 'üèóÔ∏è', 
    description: '–ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã',
    prompt: '–¢—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ø–ª–∞–Ω—ã.'
  },
  { 
    id: 'fixer', 
    name: '–ò—Å–ø—Ä–∞–≤–ª—è—é—â–∏–π', 
    icon: 'üîß', 
    description: '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –∏ –±–∞–≥–∏',
    prompt: '–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—à–∏–±–æ–∫. –ù–∞—Ö–æ–¥–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–π –±–∞–≥–∏ –≤ –∫–æ–¥–µ.'
  },
  { 
    id: 'coder', 
    name: '–ö–æ–¥–µ—Ä', 
    icon: 'üíª', 
    description: '–ü–∏—à–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥',
    prompt: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ü–∏—à–∏ —á–∏—Å—Ç—ã–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏ —Ö–æ—Ä–æ—à–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥.'
  },
  { 
    id: 'analyzer', 
    name: '–ê–Ω–∞–ª–∏—Ç–∏–∫', 
    icon: 'üìä', 
    description: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –¥–∞–Ω–Ω—ã–µ',
    prompt: '–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞ –∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–æ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.'
  },
  { 
    id: 'reviewer', 
    name: '–†–µ–≤—å—é–µ—Ä', 
    icon: 'üëÅÔ∏è', 
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞',
    prompt: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–≤—å—é –∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—è–π –∫–æ–¥ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.'
  },
  { 
    id: 'documenter', 
    name: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä', 
    icon: 'üìö', 
    description: '–°–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
    prompt: '–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –°–æ–∑–¥–∞–≤–∞–π –ø–æ–Ω—è—Ç–Ω—É—é –∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–æ–¥–∞ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.'
  },
  { 
    id: 'tester', 
    name: '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 
    icon: 'üß™', 
    description: '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã',
    prompt: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –°–æ–∑–¥–∞–≤–∞–π comprehensive —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞.'
  },
];

interface AgentSelectorProps {
  selectedAgent?: string;
  onAgentSelect: (agentId: string) => void;
  className?: string;
}

export function AgentSelector({ selectedAgent, onAgentSelect, className }: AgentSelectorProps) {
  const [customAgents, setCustomAgents] = useKV<CustomAgent[]>('custom-agents', []);
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [newAgentName, setNewAgentName] = useState('');
  const [newAgentDescription, setNewAgentDescription] = useState('');
  const [newAgentPrompt, setNewAgentPrompt] = useState('');
  const [newAgentIcon, setNewAgentIcon] = useState('ü§ñ');

  const allAgents = [...DEFAULT_AGENTS, ...(customAgents || [])];
  const currentAgent = allAgents.find(agent => agent.id === selectedAgent);

  const handleAddAgent = () => {
    if (!newAgentName.trim() || !newAgentPrompt.trim()) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞');
      return;
    }

    const newAgent: CustomAgent = {
      id: `custom_${Date.now()}`,
      name: newAgentName.trim(),
      description: newAgentDescription.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç',
      prompt: newAgentPrompt.trim(),
      icon: newAgentIcon || 'ü§ñ',
      createdAt: new Date(),
    };

    setCustomAgents(prev => [...(prev || []), newAgent]);
    onAgentSelect(newAgent.id);
    
    // Reset form
    setNewAgentName('');
    setNewAgentDescription('');
    setNewAgentPrompt('');
    setNewAgentIcon('ü§ñ');
    setIsAddDialogOpen(false);

    toast.success(`–ê–≥–µ–Ω—Ç "${newAgent.name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
  };

  const handleDeleteAgent = (agentId: string) => {
    setCustomAgents(prev => (prev || []).filter(agent => agent.id !== agentId));
    if (selectedAgent === agentId) {
      onAgentSelect(DEFAULT_AGENTS[0].id);
    }
    toast.success('–ê–≥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
  };

  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button 
            variant="ghost" 
            size="sm" 
            className={cn(
              "h-6 w-6 p-0 bg-muted/50 hover:bg-muted",
              className
            )}
            title={`–ê–≥–µ–Ω—Ç: ${currentAgent?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω'}`}
          >
            <Robot size={14} />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start" className="w-72">
          {/* Default agents */}
          {DEFAULT_AGENTS.map((agent) => (
            <DropdownMenuItem
              key={agent.id}
              onClick={() => onAgentSelect(agent.id)}
              className={cn(
                "flex items-start gap-3 p-3 cursor-pointer",
                selectedAgent === agent.id && "bg-accent"
              )}
            >
              <div className="text-lg">{agent.icon}</div>
              <div className="flex-1">
                <div className="font-medium">{agent.name}</div>
                <div className="text-xs text-muted-foreground">{agent.description}</div>
              </div>
              {selectedAgent === agent.id && (
                <div className="w-2 h-2 bg-accent rounded-full" />
              )}
            </DropdownMenuItem>
          ))}

          {/* Custom agents */}
          {customAgents && customAgents.length > 0 && (
            <>
              <DropdownMenuSeparator />
              {customAgents.map((agent) => (
                <DropdownMenuItem
                  key={agent.id}
                  onClick={() => onAgentSelect(agent.id)}
                  className={cn(
                    "flex items-start gap-3 p-3 cursor-pointer group",
                    selectedAgent === agent.id && "bg-accent"
                  )}
                >
                  <div className="text-lg">{agent.icon}</div>
                  <div className="flex-1">
                    <div className="font-medium">{agent.name}</div>
                    <div className="text-xs text-muted-foreground">{agent.description}</div>
                  </div>
                  <div className="flex items-center gap-1">
                    {selectedAgent === agent.id && (
                      <div className="w-2 h-2 bg-accent rounded-full" />
                    )}
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-5 w-5 p-0 opacity-0 group-hover:opacity-100 text-destructive hover:text-destructive"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleDeleteAgent(agent.id);
                      }}
                      title="–£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"
                    >
                      √ó
                    </Button>
                  </div>
                </DropdownMenuItem>
              ))}
            </>
          )}

          <DropdownMenuSeparator />
          
          {/* Add new agent */}
          <DropdownMenuItem
            onClick={() => setIsAddDialogOpen(true)}
            className="flex items-center gap-3 p-3 cursor-pointer text-accent hover:text-accent-foreground hover:bg-accent"
          >
            <Plus size={16} />
            <span className="font-medium">–î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞</span>
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      {/* Add agent dialog */}
      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
        <DialogContent className="sm:max-w-[525px]">
          <DialogHeader>
            <DialogTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞</DialogTitle>
            <DialogDescription>
              –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="agent-icon" className="text-right">
                –ò–∫–æ–Ω–∫–∞
              </Label>
              <Input
                id="agent-icon"
                value={newAgentIcon}
                onChange={(e) => setNewAgentIcon(e.target.value)}
                placeholder="ü§ñ"
                className="col-span-3"
                maxLength={2}
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="agent-name" className="text-right">
                –ù–∞–∑–≤–∞–Ω–∏–µ
              </Label>
              <Input
                id="agent-name"
                value={newAgentName}
                onChange={(e) => setNewAgentName(e.target.value)}
                placeholder="–ú–æ–π –∞–≥–µ–Ω—Ç"
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="agent-description" className="text-right">
                –û–ø–∏—Å–∞–Ω–∏–µ
              </Label>
              <Input
                id="agent-description"
                value={newAgentDescription}
                onChange={(e) => setNewAgentDescription(e.target.value)}
                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-start gap-4">
              <Label htmlFor="agent-prompt" className="text-right pt-2">
                –ü—Ä–æ–º–ø—Ç
              </Label>
              <Textarea
                id="agent-prompt"
                value={newAgentPrompt}
                onChange={(e) => setNewAgentPrompt(e.target.value)}
                placeholder="–û–ø–∏—à–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –°–æ–∑–¥–∞–≤–∞–π comprehensive —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–¥–∞...'"
                className="col-span-3 min-h-[100px]"
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddDialogOpen(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleAddAgent}>
              –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}