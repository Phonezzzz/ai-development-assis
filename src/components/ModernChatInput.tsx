import { useState, useRef, useCallback, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { AgentSelector } from '@/components/AgentSelector';
import { WorkModeSelector } from '@/components/WorkModeSelector';
import { WorkMode } from '@/lib/types';
import { useKV } from '@github/spark/hooks';
import { useModelSelection } from '@/hooks/use-model-selection';
import { useVoiceSimple } from '@/hooks/use-voice-simple';
import { cn } from '@/lib/utils';
import { 
  PaperPlaneRight, 
  Paperclip, 
  Microphone, 
  MicrophoneSlash,
  Robot,
  Wrench,
  Brain,
  Sparkle,
  CaretDown,
  Gear,
  Stop,
  Play
} from '@phosphor-icons/react';

interface ModernChatInputProps {
  onSubmit: (text: string, mode: WorkMode, isVoice?: boolean) => void;
  disabled?: boolean;
  placeholder?: string;
  workMode: WorkMode | null;
  setWorkMode: (mode: WorkMode) => void;
}

export function ModernChatInput({
  onSubmit,
  disabled = false,
  placeholder = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
  workMode,
  setWorkMode,
}: ModernChatInputProps) {
  const [input, setInput] = useState('');
  const [selectedAgent] = useKV<string>('selected-agent', 'architector');
  const [selectedTools, setSelectedTools] = useKV<string[]>('selected-tools', []);
  const [showDebugMode] = useKV<boolean>('show-debug-mode', false);
  const [workModeState, setWorkModeState] = useState<WorkMode>(workMode || 'plan');
  const inputRef = useRef<HTMLInputElement>(null);
  
  // Model selection hook
  const { availableModels, selectedModel, selectModel, isLoading: modelsLoading } = useModelSelection();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  const { 
    voiceState, 
    startListening, 
    stopListening, 
    isSupported,
    supportDetails,
  } = useVoiceSimple();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ STT
  const currentSTTState = voiceState;
  const isSTTAvailable = isSupported;

  // –û–±–Ω–æ–≤–ª—è–µ–º input –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª—ã
  useEffect(() => {
    if (voiceState.transcript.trim() && voiceState.transcript !== input) {
      setInput(voiceState.transcript.trim());
    }
  }, [voiceState.transcript, input]);

  const handleSubmit = useCallback((e?: React.FormEvent) => {
    e?.preventDefault();
    if (!input.trim() || disabled) return;
    
    const isVoiceInput = voiceState.isListening;
    
    onSubmit(input, workMode || 'plan', isVoiceInput);
    setInput('');
  }, [input, workMode, onSubmit, disabled, currentSTTState.isListening]);

  // Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —É–ø—Ä–æ—â–µ–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
  useEffect(() => {
    if (showDebugMode) {
      console.log('STT Debug Info:', {
        isSupported,
        isListening: voiceState.isListening,
        hasTranscript: !!voiceState.transcript,
        error: voiceState.error
      });
    }
  }, [showDebugMode, isSupported, voiceState.isListening, voiceState.error]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
  const toggleVoiceRecognition = useCallback(async () => {
    console.log('–ö–Ω–æ–ø–∫–∞ STT –Ω–∞–∂–∞—Ç–∞! –ü–æ–¥–¥–µ—Ä–∂–∫–∞:', isSupported ? '–î–∞' : '–ù–µ—Ç');
    
    if (!isSupported) {
      return;
    }

    try {
      await startListening();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ STT:', error);
    }
  }, [isSupported, startListening]);

  // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è - —É–ø—Ä–æ—â–µ–Ω–æ
  useEffect(() => {
    if (voiceState.transcript && voiceState.transcript !== input) {
      console.log('STT transcript received:', voiceState.transcript);
    }
  }, [voiceState.transcript, input]);

  const handleKeyPress = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  }, [handleSubmit]);

  // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
  const availableTools = [
    { id: 'web-search', name: '–í–µ–± –ø–æ–∏—Å–∫', icon: Brain },
  ];

  const toolIcons: Record<string, any> = {
    'web-search': Brain,
  };

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
  const availableAgents = [
    { id: 'architector', name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', icon: Robot },
    { id: 'fixer', name: '–ò—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å', icon: Wrench },
    { id: 'coder', name: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', icon: Sparkle },
  ];

  const agentIcons: Record<string, any> = {
    'architector': Robot,
    'fixer': Wrench,
    'coder': Sparkle,
  };

  const getAgentName = (id: string) => {
    return availableAgents.find(agent => agent.id === id)?.name || id;
  };

  const handleToolToggle = (toolId: string) => {
    setSelectedTools(prev => {
      const current = prev || [];
      return current.includes(toolId) 
        ? current.filter(id => id !== toolId)
        : [...current, toolId];
    });
  };

  // –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏
  const workModes = [
    { id: 'plan' as WorkMode, name: '–ü–ª–∞–Ω', icon: Brain },
    { id: 'act' as WorkMode, name: '–î–µ–π—Å—Ç–≤–∏–µ', icon: Sparkle },
    { id: 'ask' as WorkMode, name: '–°–ø—Ä–æ—Å–∏—Ç—å', icon: Robot },
  ];

  return (
    <div className="space-y-4">
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {showDebugMode && (
        <Card className="p-4 bg-muted/50 text-sm font-mono">
          <div className="space-y-1">
            <div>
              STT –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {isSupported ? '‚úÖ' : '‚ùå'} | 
              Web Speech API: {supportDetails.hasSpeechRecognition ? '‚úÖ' : '‚ùå'} | 
              MediaDevices: {supportDetails.hasMediaDevices ? '‚úÖ' : '‚ùå'} | 
              getUserMedia: {supportDetails.hasGetUserMedia ? '‚úÖ' : '‚ùå'} | 
              –°–æ—Å—Ç–æ—è–Ω–∏–µ: {voiceState.isListening ? '–°–ª—É—à–∞–µ—Ç' : voiceState.isProcessing ? '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç' : '–û–∂–∏–¥–∞–Ω–∏–µ'} | 
              –ö–Ω–æ–ø–∫–∞: {isSupported ? '–î–æ—Å—Ç—É–ø–Ω–∞' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}
            </div>
            <div>
              –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: "{voiceState.transcript}" | 
              –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {(voiceState.confidence * 100).toFixed(1)}%
              {voiceState.error && ` | –û—à–∏–±–∫–∞: ${voiceState.error}`}
            </div>
            <div>
              –ë—Ä–∞—É–∑–µ—Ä: {supportDetails.userAgent.substring(0, 50)}... | 
              –ü—Ä–æ—Ç–æ–∫–æ–ª: {supportDetails.protocol} | 
              –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {supportDetails.isSecureContext ? '–î–∞' : '–ù–µ—Ç'}
            </div>
          </div>
        </Card>
      )}

      <Card className="relative border-2 border-border hover:border-accent/50 transition-colors duration-200">
        <div className="flex items-center gap-2 p-3">
          {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –º–æ–¥–µ–ª–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
          <div className="flex items-center gap-2">
            {/* –°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="h-8 px-2 hover:bg-accent/20 border border-border"
                  disabled={modelsLoading}
                >
                  {modelsLoading ? (
                    <Skeleton className="w-16 h-4" />
                  ) : (
                    <>
                      <Gear size={14} className="mr-1" />
                    <span className="text-xs max-w-[100px] truncate">
                        {availableModels.find(m => m.id === selectedModel)?.name || '–ú–æ–¥–µ–ª—å'}
                      </span>
                      <CaretDown size={12} className="ml-1" />
                    </>
                  )}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start" className="w-64">
                <DropdownMenuLabel>–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏</DropdownMenuLabel>
                <DropdownMenuItem
                  onClick={() => {
                    const url = prompt('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', 'http://localhost:11964');
                    if (url) {
                      // Store the local server URL and refresh models
                      localStorage.setItem('local-server-url', url);
                      window.location.reload(); // Simple refresh for now
                    }
                  }}
                  className="text-blue-400 font-medium"
                >
                  ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                
                <DropdownMenuLabel>–ú–æ–¥–µ–ª–∏</DropdownMenuLabel>
                <DropdownMenuSeparator />
                
                {/* Local Models Section */}
                {availableModels.filter(m => m.isLocal).length > 0 && (
                  <>
                    {availableModels.filter(m => m.isLocal).map((model) => (
                      <DropdownMenuItem
                        key={model.id}
                        onClick={() => selectModel(model.id)}
                        className={cn(
                          "flex items-center justify-between",
                          selectedModel === model.id && "bg-accent"
                        )}
                      >
                        <div className="flex flex-col">
                          <span className="font-medium text-green-400">üè† {model.name}</span>
                          <span className="text-xs text-muted-foreground">
                            –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
                          </span>
                        </div>
                        {selectedModel === model.id && (
                          <div className="w-2 h-2 bg-primary rounded-full" />
                        )}
                      </DropdownMenuItem>
                    ))}
                    <DropdownMenuSeparator />
                  </>
                )}
                
                {/* OpenRouter Models */}
                {availableModels.filter(m => !m.isLocal).map((model) => (
                  <DropdownMenuItem
                    key={model.id}
                    onClick={() => selectModel(model.id)}
                    className={cn(
                      "flex items-center justify-between",
                      selectedModel === model.id && "bg-accent"
                    )}
                  >
                    <div className="flex flex-col">
                      <span className="font-medium">{model.name}</span>
                      {model.description && (
                        <span className="text-xs text-muted-foreground">
                          {model.description}
                        </span>
                      )}
                    </div>
                    {selectedModel === model.id && (
                      <div className="w-2 h-2 bg-primary rounded-full" />
                    )}
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            {/* –°–µ–ª–µ–∫—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="h-8 px-2 hover:bg-accent/20 border border-border"
                >
                  <Wrench size={14} className="mr-1" />
                  <span className="text-xs">
                    {(selectedTools || []).length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ
                  </span>
                  <CaretDown size={12} className="ml-1" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                <DropdownMenuLabel>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</DropdownMenuLabel>
                <DropdownMenuSeparator />
                {availableTools.map((tool) => {
                  const ToolIcon = toolIcons[tool.id];
                  const isSelected = (selectedTools || []).includes(tool.id);
                  return (
                    <DropdownMenuItem
                      key={tool.id}
                      onClick={() => handleToolToggle(tool.id)}
                      className={cn(
                        "flex items-center gap-2",
                        isSelected && "bg-accent"
                      )}
                    >
                      <ToolIcon size={16} />
                      <span>{tool.name}</span>
                      {isSelected && (
                        <div className="ml-auto w-2 h-2 bg-primary rounded-full" />
                      )}
                    </DropdownMenuItem>
                  );
                })}
              </DropdownMenuContent>
            </DropdownMenu>

            {/* –°–µ–ª–µ–∫—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="h-8 px-2 hover:bg-accent/20 border border-border"
                >
                  <Robot size={14} className="mr-1" />
                  <span className="text-xs">–ê–≥–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω</span>
                  <CaretDown size={12} className="ml-1" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                <DropdownMenuLabel>–ê–≥–µ–Ω—Ç—ã</DropdownMenuLabel>
                <DropdownMenuSeparator />
                {availableAgents.map((agent) => {
                  const AgentIcon = agentIcons[agent.id];
                  const isSelected = selectedAgent === agent.id;
                  return (
                    <DropdownMenuItem
                      key={agent.id}
                      onClick={() => {}}
                      className={cn(
                        "flex items-center gap-2",
                        isSelected && "bg-accent"
                      )}
                    >
                      <AgentIcon size={16} />
                      <span>{agent.name}</span>
                      {isSelected && (
                        <div className="ml-auto w-2 h-2 bg-primary rounded-full" />
                      )}
                    </DropdownMenuItem>
                  );
                })}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω–æ–π –≤–≤–æ–¥ */}
          <div className="flex-1 relative">
            <Input
              ref={inputRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={placeholder}
              disabled={disabled}
              className="border-0 focus-visible:ring-0 bg-transparent pr-24"
            />
          </div>

          {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - STT, –≤–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ */}
          <div className="flex items-center gap-2">
            {/* –ö–Ω–æ–ø–∫–∞ STT */}
            <Button
              variant="ghost"
              size="sm"
              onClick={toggleVoiceRecognition}
              disabled={!isSupported}
              className={cn(
                "h-8 w-8 p-0 hover:bg-accent/20",
                voiceState.isListening && "bg-accent text-accent-foreground",
                !isSupported && "opacity-50 cursor-not-allowed"
              )}
              title={
                isSupported 
                  ? "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"
                  : "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ"
              }
            >
              {voiceState.isListening ? (
                <MicrophoneSlash size={16} />
              ) : (
                <Microphone size={16} />
              )}
            </Button>

            {/* –ö–Ω–æ–ø–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π */}
            <Button
              variant="ghost"
              size="sm"
              className="h-8 w-8 p-0 hover:bg-accent/20"
              disabled={disabled}
            >
              <Paperclip size={16} />
            </Button>

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <Button
              onClick={handleSubmit}
              disabled={disabled || !input.trim()}
              size="sm"
              className="h-8 w-8 p-0"
            >
              <PaperPlaneRight size={16} />
            </Button>
          </div>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ */}
        {voiceState.isListening && (
          <div className="absolute bottom-0 left-0 right-0 h-1 bg-accent/20">
            <div className="h-full bg-accent animate-pulse" />
          </div>
        )}
      </Card>

      {/* –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã */}
      <div className="flex justify-end">
        <WorkModeSelector 
          selectedMode={workModeState} 
          onModeSelect={(mode) => {
            setWorkModeState(mode);
            setWorkMode(mode);
          }}
        />
      </div>
    </div>
  );
}