import { useState, useCallback } from 'react';
import { useKV } from '@github/spark/hooks';
import { Agent, AgentType, AgentStatus, Plan, PlanStep, Message } from '@/lib/types';
import { openRouterService } from '@/lib/openrouter';
import { useModelSelection } from './use-model-selection';

const AGENTS: Agent[] = [
  {
    id: 'planner',
    name: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫',
    description: '–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ —É—Ç–æ—á–Ω—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
    status: 'idle',
    avatar: 'üß†',
  },
  {
    id: 'worker',
    name: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', 
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥',
    status: 'idle',
    avatar: '‚ö°',
  },
  {
    id: 'supervisor',
    name: '–°—É–ø–µ—Ä–≤–∏–∑–æ—Ä',
    description: '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤',
    status: 'idle',
    avatar: 'üëÅÔ∏è',
  },
  {
    id: 'error-fixer',
    name: '–û—Ç–ª–∞–¥—á–∏–∫',
    description: '–ù–∞—Ö–æ–¥–∏—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏',
    status: 'idle',
    avatar: 'üîß',
  },
];

export function useAgentSystem() {
  const [agents, setAgents] = useState<Agent[]>(AGENTS);
  const [currentPlan, setCurrentPlan] = useKV<Plan | null>('agent-current-plan', null);
  const [plans, setPlans] = useKV<Plan[]>('agent-plans', []);
  const [isWorking, setIsWorking] = useState(false);
  const [currentAgent, setCurrentAgent] = useState<AgentType | null>(null);
  const { selectedModel } = useModelSelection();

  const updateAgentStatus = useCallback((agentId: AgentType, status: AgentStatus) => {
    setAgents((prev) => prev.map(agent => 
      agent.id === agentId ? { ...agent, status } : agent
    ));
  }, []);

  const resetAllAgents = useCallback(() => {
    setAgents((prev) => prev.map(agent => ({ ...agent, status: 'idle' })));
    setCurrentAgent(null);
    setIsWorking(false);
  }, []);

  const createPlan = useCallback(async (userInput: string): Promise<Plan> => {
    updateAgentStatus('planner', 'thinking');
    setCurrentAgent('planner');

    try {
      const prompt = `–¢—ã - –ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userInput}".

–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–∏–º –æ–¥–Ω–∏–º –∏–∑ –∞–≥–µ–Ω—Ç–æ–≤:
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∞–Ω–∞–ª–∏–∑ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
- –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
- –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
- –û—Ç–ª–∞–¥—á–∏–∫: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "title": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞",
  "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ",
  "steps": [
    {
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞",
      "agentType": "planner|worker|supervisor|error-fixer"
    }
  ]
}`;

      const response = await openRouterService.generateCompletion(
        prompt,
        selectedModel,
        {
          maxTokens: 1000,
          temperature: 0.3,
          systemMessage: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.'
        }
      );

      let planData;
      try {
        planData = JSON.parse(response);
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –º–æ–¥–µ–ª–∏:', parseError);
        // Fallback plan if JSON parsing fails
        planData = {
          title: `–ü–ª–∞–Ω –¥–ª—è: ${userInput.slice(0, 50)}...`,
          description: `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${userInput}`,
          steps: [
            { description: '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', agentType: 'planner' },
            { description: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', agentType: 'worker' },
            { description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞', agentType: 'supervisor' },
            { description: '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞', agentType: 'error-fixer' }
          ]
        };
      }

      const planSteps: PlanStep[] = planData.steps.map((step: any, index: number) => ({
        id: `step_${index + 1}`,
        description: step.description,
        status: 'pending' as const,
        agentType: step.agentType as AgentType,
      }));

      const newPlan: Plan = {
        id: `plan_${Date.now()}`,
        title: planData.title,
        description: planData.description,
        steps: planSteps,
        status: 'draft',
        createdAt: new Date(),
      };

      updateAgentStatus('planner', 'complete');
      setCurrentPlan(newPlan);
      
      return newPlan;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞:', error);
      updateAgentStatus('planner', 'error');
      
      // Fallback plan
      const fallbackPlan: Plan = {
        id: `plan_${Date.now()}`,
        title: `–ü–ª–∞–Ω –¥–ª—è: ${userInput.slice(0, 50)}...`,
        description: `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${userInput}`,
        steps: [
          {
            id: 'step1',
            description: '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            status: 'pending',
            agentType: 'planner',
          },
          {
            id: 'step2',
            description: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
            status: 'pending',
            agentType: 'worker',
          },
          {
            id: 'step3',
            description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤',
            status: 'pending',
            agentType: 'supervisor',
          },
          {
            id: 'step4',
            description: '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            status: 'pending',
            agentType: 'error-fixer',
          },
        ],
        status: 'draft',
        createdAt: new Date(),
      };
      
      setCurrentPlan(fallbackPlan);
      return fallbackPlan;
    }
  }, [updateAgentStatus, setCurrentPlan, selectedModel]);

  const confirmPlan = useCallback(() => {
    if (!currentPlan) return;
    
    const confirmedPlan = { ...currentPlan, status: 'confirmed' as const };
    setCurrentPlan(confirmedPlan);
    setPlans((prev) => [...prev, confirmedPlan]);
  }, [currentPlan, setCurrentPlan, setPlans]);

  const executePlan = useCallback(async (): Promise<Message[]> => {
    if (!currentPlan || currentPlan.status !== 'confirmed') return [];

    setIsWorking(true);
    const messages: Message[] = [];
    const updatedPlan = { ...currentPlan, status: 'executing' as const };
    setCurrentPlan(updatedPlan);

    for (const step of currentPlan.steps) {
      updateAgentStatus(step.agentType, 'active');
      setCurrentAgent(step.agentType);

      try {
        let agentResponse = '';
        let systemMessage = '';
        let prompt = '';
        
        switch (step.agentType) {
          case 'planner':
            systemMessage = '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–≤–æ–¥–∏—à—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.';
            prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É: "${step.description}"\n\n–û–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.`;
            break;
          case 'worker':
            systemMessage = '–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –ü–∏—à–µ—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫ –∏ TODO.';
            prompt = `–†–µ–∞–ª–∏–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É: "${step.description}"\n\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.`;
            break;
          case 'supervisor':
            systemMessage = '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—à—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.';
            prompt = `–ü—Ä–æ–≤–µ—Ä—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: "${step.description}"\n\n–û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.`;
            break;
          case 'error-fixer':
            systemMessage = '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ç–ª–∞–¥–∫–µ. –ù–∞—Ö–æ–¥–∏—à—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–æ–¥–∏—à—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.';
            prompt = `–ü—Ä–æ–≤–µ–¥–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞—á–∏: "${step.description}"\n\n–£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤—å –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.`;
            break;
        }

        agentResponse = await openRouterService.generateCompletion(
          prompt,
          selectedModel,
          {
            maxTokens: 1500,
            temperature: 0.7,
            systemMessage
          }
        );

        const message: Message = {
          id: `msg_${Date.now()}_${step.id}`,
          type: 'agent',
          content: agentResponse,
          agentType: step.agentType,
          timestamp: new Date(),
        };

        messages.push(message);
        updateAgentStatus(step.agentType, 'complete');

        const updatedStep = { ...step, status: 'complete' as const, result: agentResponse };
        const updatedSteps = updatedPlan.steps.map(s => s.id === step.id ? updatedStep : s);
        const finalPlan = { ...updatedPlan, steps: updatedSteps };
        setCurrentPlan(finalPlan);

        // Small delay between agents for better UX
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ ${step.agentType}:`, error);
        updateAgentStatus(step.agentType, 'error');
        
        // Fallback response
        const fallbackResponse = `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "${step.description}" –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.`;
        
        const message: Message = {
          id: `msg_${Date.now()}_${step.id}`,
          type: 'agent',
          content: fallbackResponse,
          agentType: step.agentType,
          timestamp: new Date(),
        };

        messages.push(message);
      }
    }

    const completePlan = { ...updatedPlan, status: 'complete' as const };
    setCurrentPlan(completePlan);
    setIsWorking(false);
    setCurrentAgent(null);
    
    return messages;
  }, [currentPlan, setCurrentPlan, updateAgentStatus, selectedModel]);

  const getAgentByType = useCallback((type: AgentType) => {
    return agents.find(agent => agent.id === type);
  }, [agents]);

  return {
    agents,
    currentPlan,
    plans,
    isWorking,
    currentAgent,
    createPlan,
    confirmPlan,
    executePlan,
    resetAllAgents,
    updateAgentStatus,
    getAgentByType,
  };
}