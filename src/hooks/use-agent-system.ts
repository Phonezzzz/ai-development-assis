import { useState, useCallback } from 'react';
import { useKV } from '@github/spark/hooks';
import { Agent, AgentType, AgentStatus, Plan, PlanStep, Message } from '@/lib/types';

const AGENTS: Agent[] = [
  {
    id: 'planner',
    name: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫',
    description: '–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ —É—Ç–æ—á–Ω—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
    status: 'idle',
    avatar: 'üß†',
  },
  {
    id: 'worker',
    name: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', 
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥',
    status: 'idle',
    avatar: '‚ö°',
  },
  {
    id: 'supervisor',
    name: '–°—É–ø–µ—Ä–≤–∏–∑–æ—Ä',
    description: '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤',
    status: 'idle',
    avatar: 'üëÅÔ∏è',
  },
  {
    id: 'error-fixer',
    name: '–û—Ç–ª–∞–¥—á–∏–∫',
    description: '–ù–∞—Ö–æ–¥–∏—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏',
    status: 'idle',
    avatar: 'üîß',
  },
];

export function useAgentSystem() {
  const [agents, setAgents] = useState<Agent[]>(AGENTS);
  const [currentPlan, setCurrentPlan] = useKV<Plan | null>('agent-current-plan', null);
  const [plans, setPlans] = useKV<Plan[]>('agent-plans', []);
  const [isWorking, setIsWorking] = useState(false);
  const [currentAgent, setCurrentAgent] = useState<AgentType | null>(null);

  const updateAgentStatus = useCallback((agentId: AgentType, status: AgentStatus) => {
    setAgents((prev) => prev.map(agent => 
      agent.id === agentId ? { ...agent, status } : agent
    ));
  }, []);

  const resetAllAgents = useCallback(() => {
    setAgents((prev) => prev.map(agent => ({ ...agent, status: 'idle' })));
    setCurrentAgent(null);
    setIsWorking(false);
  }, []);

  const createPlan = useCallback(async (userInput: string): Promise<Plan> => {
    updateAgentStatus('planner', 'thinking');
    setCurrentAgent('planner');

    await new Promise(resolve => setTimeout(resolve, 2000));

    const planSteps: PlanStep[] = [
      {
        id: 'step1',
        description: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç',
        status: 'pending',
        agentType: 'planner',
      },
      {
        id: 'step2', 
        description: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
        status: 'pending',
        agentType: 'worker',
      },
      {
        id: 'step3',
        description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º',
        status: 'pending',
        agentType: 'supervisor',
      },
      {
        id: 'step4',
        description: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã',
        status: 'pending',
        agentType: 'error-fixer',
      },
    ];

    const newPlan: Plan = {
      id: `plan_${Date.now()}`,
      title: `–ü–ª–∞–Ω –¥–ª—è: ${userInput.slice(0, 50)}...`,
      description: `–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${userInput}`,
      steps: planSteps,
      status: 'draft',
      createdAt: new Date(),
    };

    updateAgentStatus('planner', 'complete');
    setCurrentPlan(newPlan);
    
    return newPlan;
  }, [updateAgentStatus, setCurrentPlan]);

  const confirmPlan = useCallback(() => {
    if (!currentPlan) return;
    
    const confirmedPlan = { ...currentPlan, status: 'confirmed' as const };
    setCurrentPlan(confirmedPlan);
    setPlans((prev) => [...prev, confirmedPlan]);
  }, [currentPlan, setCurrentPlan, setPlans]);

  const executePlan = useCallback(async (): Promise<Message[]> => {
    if (!currentPlan || currentPlan.status !== 'confirmed') return [];

    setIsWorking(true);
    const messages: Message[] = [];
    const updatedPlan = { ...currentPlan, status: 'executing' as const };
    setCurrentPlan(updatedPlan);

    for (const step of currentPlan.steps) {
      updateAgentStatus(step.agentType, 'active');
      setCurrentAgent(step.agentType);

      await new Promise(resolve => setTimeout(resolve, 3000));

      let agentResponse = '';
      
      switch (step.agentType) {
        case 'planner':
          agentResponse = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é.';
          break;
        case 'worker':
          agentResponse = '```typescript\n// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\nfunction implementFeature() {\n  console.log("–§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞");\n  return { success: true };\n}\n```';
          break;
        case 'supervisor':
          agentResponse = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–±–ª—é–¥–µ–Ω—ã. –ü—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.';
          break;
        case 'error-fixer':
          agentResponse = '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.';
          break;
      }

      const message: Message = {
        id: `msg_${Date.now()}_${step.id}`,
        type: 'agent',
        content: agentResponse,
        agentType: step.agentType,
        timestamp: new Date(),
      };

      messages.push(message);
      updateAgentStatus(step.agentType, 'complete');

      const updatedStep = { ...step, status: 'complete' as const, result: agentResponse };
      const updatedSteps = updatedPlan.steps.map(s => s.id === step.id ? updatedStep : s);
      const finalPlan = { ...updatedPlan, steps: updatedSteps };
      setCurrentPlan(finalPlan);
    }

    const completePlan = { ...updatedPlan, status: 'complete' as const };
    setCurrentPlan(completePlan);
    setIsWorking(false);
    setCurrentAgent(null);
    
    return messages;
  }, [currentPlan, setCurrentPlan, updateAgentStatus]);

  const getAgentByType = useCallback((type: AgentType) => {
    return agents.find(agent => agent.id === type);
  }, [agents]);

  return {
    agents,
    currentPlan,
    plans,
    isWorking,
    currentAgent,
    createPlan,
    confirmPlan,
    executePlan,
    resetAllAgents,
    updateAgentStatus,
    getAgentByType,
  };
}